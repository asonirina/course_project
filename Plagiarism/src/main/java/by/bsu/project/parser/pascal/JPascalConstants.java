package by.bsu.project.parser.pascal;

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface JPascalConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int NUMBER = 11;
  /** RegularExpression Id. */
  int DECIMAL = 12;
  /** RegularExpression Id. */
  int FRAC = 13;
  /** RegularExpression Id. */
  int EXP = 14;
  /** RegularExpression Id. */
  int STRING_LITERAL = 15;
  /** RegularExpression Id. */
  int AND = 16;
  /** RegularExpression Id. */
  int BEGIN = 17;
  /** RegularExpression Id. */
  int CASE = 18;
  /** RegularExpression Id. */
  int CONST = 19;
  /** RegularExpression Id. */
  int DIV = 20;
  /** RegularExpression Id. */
  int DO = 21;
  /** RegularExpression Id. */
  int DOWNTO = 22;
  /** RegularExpression Id. */
  int ELSE = 23;
  /** RegularExpression Id. */
  int END = 24;
  /** RegularExpression Id. */
  int EXTERN = 25;
  /** RegularExpression Id. */
  int FOR = 26;
  /** RegularExpression Id. */
  int FORWARD = 27;
  /** RegularExpression Id. */
  int FUNCTION = 28;
  /** RegularExpression Id. */
  int GOTO = 29;
  /** RegularExpression Id. */
  int IF = 30;
  /** RegularExpression Id. */
  int IN = 31;
  /** RegularExpression Id. */
  int LABEL = 32;
  /** RegularExpression Id. */
  int INTERFACE = 33;
  /** RegularExpression Id. */
  int IMPLEMENTATION = 34;
  /** RegularExpression Id. */
  int MOD = 35;
  /** RegularExpression Id. */
  int NIL = 36;
  /** RegularExpression Id. */
  int MAXINT = 37;
  /** RegularExpression Id. */
  int NOT = 38;
  /** RegularExpression Id. */
  int OF = 39;
  /** RegularExpression Id. */
  int OR = 40;
  /** RegularExpression Id. */
  int OTHERWISE = 41;
  /** RegularExpression Id. */
  int PACKED = 42;
  /** RegularExpression Id. */
  int PROCEDURE = 43;
  /** RegularExpression Id. */
  int PROGRAM = 44;
  /** RegularExpression Id. */
  int RECORD = 45;
  /** RegularExpression Id. */
  int REPEAT = 46;
  /** RegularExpression Id. */
  int SETOF = 47;
  /** RegularExpression Id. */
  int THEN = 48;
  /** RegularExpression Id. */
  int TO = 49;
  /** RegularExpression Id. */
  int TYPE = 50;
  /** RegularExpression Id. */
  int UNIT = 51;
  /** RegularExpression Id. */
  int UNTIL = 52;
  /** RegularExpression Id. */
  int USES = 53;
  /** RegularExpression Id. */
  int VAR = 54;
  /** RegularExpression Id. */
  int WHILE = 55;
  /** RegularExpression Id. */
  int WITH = 56;
  /** RegularExpression Id. */
  int SINGLE = 57;
  /** RegularExpression Id. */
  int POINTER = 58;
  /** RegularExpression Id. */
  int STRING = 59;
  /** RegularExpression Id. */
  int IDENTIFIER = 60;
  /** RegularExpression Id. */
  int LETTER = 61;
  /** RegularExpression Id. */
  int DIGIT = 62;
  /** RegularExpression Id. */
  int LPAREN = 63;
  /** RegularExpression Id. */
  int RPAREN = 64;
  /** RegularExpression Id. */
  int LBRACKET = 65;
  /** RegularExpression Id. */
  int RBRACKET = 66;
  /** RegularExpression Id. */
  int SEMICOLON = 67;
  /** RegularExpression Id. */
  int COMMA = 68;
  /** RegularExpression Id. */
  int COLON = 69;
  /** RegularExpression Id. */
  int PLUS = 70;
  /** RegularExpression Id. */
  int MINUS = 71;
  /** RegularExpression Id. */
  int MULTIPLY = 72;
  /** RegularExpression Id. */
  int STARSTAR = 73;
  /** RegularExpression Id. */
  int DIVIDE = 74;
  /** RegularExpression Id. */
  int DOT = 75;
  /** RegularExpression Id. */
  int DOTDOT = 76;
  /** RegularExpression Id. */
  int ASSIGN = 77;
  /** RegularExpression Id. */
  int EQ = 78;
  /** RegularExpression Id. */
  int LE = 79;
  /** RegularExpression Id. */
  int GE = 80;
  /** RegularExpression Id. */
  int NE = 81;
  /** RegularExpression Id. */
  int GT = 82;
  /** RegularExpression Id. */
  int LT = 83;
  /** RegularExpression Id. */
  int ADDR = 84;
  /** RegularExpression Id. */
  int UPARROW = 85;
  /** RegularExpression Id. */
  int SQUOTE = 86;
  /** RegularExpression Id. */
  int DQUOTE = 87;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int WithinComment0 = 1;
  /** Lexical state. */
  int WithinComment1 = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"(*\"",
    "\"{\"",
    "\"*)\"",
    "<token of kind 8>",
    "\"}\"",
    "<token of kind 10>",
    "<NUMBER>",
    "<DECIMAL>",
    "<FRAC>",
    "<EXP>",
    "<STRING_LITERAL>",
    "\"and\"",
    "\"begin\"",
    "\"case\"",
    "\"const\"",
    "\"div\"",
    "\"do\"",
    "\"downto\"",
    "\"else\"",
    "\"end\"",
    "<EXTERN>",
    "\"for\"",
    "\"forward\"",
    "\"function\"",
    "\"goto\"",
    "\"if\"",
    "\"in\"",
    "\"label\"",
    "\"interface\"",
    "\"implementation\"",
    "\"mod\"",
    "\"nil\"",
    "\"maxint\"",
    "\"not\"",
    "\"of\"",
    "\"or\"",
    "\"otherwise\"",
    "\"packed\"",
    "\"procedure\"",
    "\"program\"",
    "\"record\"",
    "\"repeat\"",
    "\"setof\"",
    "\"then\"",
    "\"to\"",
    "\"type\"",
    "\"unit\"",
    "\"until\"",
    "\"uses\"",
    "\"var\"",
    "\"while\"",
    "\"with\"",
    "\"single\"",
    "\"pointer\"",
    "\"string\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\":\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"**\"",
    "\"/\"",
    "\".\"",
    "\"..\"",
    "\":=\"",
    "\"=\"",
    "\"<=\"",
    "\">=\"",
    "\"<>\"",
    "\">\"",
    "\"<\"",
    "\"@\"",
    "\"^\"",
    "\"\\\'\"",
    "\"\\\"\"",
  };

}
