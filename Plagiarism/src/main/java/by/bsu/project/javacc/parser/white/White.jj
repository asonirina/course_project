options {
  IGNORE_CASE = true;
  //STATIC = false;
}

PARSER_BEGIN(White)

package by.bsu.project.javacc.parser.white;

import java.io.*;
import java.util.Date;

class White {

  static PrintStream save;
  static File outputFile = null;
  static int lineNo = 1;
  static void ReInit(InputStream is, File f) {
    // Don't need to reinitialise the PrintStream, it's done for us.
    White.ReInit(is);
    White.outputFile = f;
    White.lineNo=1;
  } // ReInit

  static void main(String args[]) throws ParseException {
    White parser = new White(System.in);
    parser.Input();
  }

}
PARSER_END(White)

TOKEN_MGR_DECLS : {
}

TOKEN : {
  <hashLine : "#line ">
}

TOKEN : {
  <newLine : "\r\n" | "\r" | "\n">
}

TOKEN : {
  <space : " ">
}

TOKEN : {
  <tab : "\t">
}

void anyOldLines () : {
}
{
  <hashLine> {
    lineNo = Integer.parseInt(getToken(0).image);
    // The newLine after will incorrectly add 1 to the line count, so correct this in advance.
    // Must remember, the number refers to the original number of the *following* line.
    lineNo--;
  }
|
   <space> {

      save.print("<space>");
   }
|
     <tab>  {

      save.print("<tab>");
   }
|
  <newLine> {
      save.print("<new_line>");

    lineNo++;
  }

}

void Input () : {
  try {
    if (outputFile!=null)
      save = new PrintStream(new FileOutputStream(outputFile));
    else
      save = System.out;
  } catch (IOException e) {
      Date day = new Date(System.currentTimeMillis());
      if (outputFile != null) {
        try {
            String file = new String
                (System.getProperty("user.home") + Settings.fileSep
                 + "sherlock.log");
            BufferedWriter bw = new BufferedWriter
                (new FileWriter(file, true));
            bw.write(day + "-" + "Cannot write to: "
                     + outputFile.getAbsolutePath());
            bw.newLine();
            bw.close();
        }
        catch (IOException e2) {
            if (outputFile != null)
                System.err.println(day + "-" + "Cannot write to: "
                                   + outputFile.getAbsolutePath());
        }
      }
      else System.err.println(day + "-" + "Cannot write to System.out");
      return;
  }
}
{
  (anyOldLines())* <EOF> {
    save.flush();
    save.close();
  }
 }
